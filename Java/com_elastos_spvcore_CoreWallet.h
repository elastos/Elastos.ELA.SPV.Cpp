/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_elastos_spvcore_CoreWallet */

#ifndef _Included_com_elastos_spvcore_CoreWallet
#define _Included_com_elastos_spvcore_CoreWallet
#ifdef __cplusplus
extern "C" {
#endif
	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    createJniCoreWallet
	 * Signature: ([Lcom/breadwallet/core/BRCoreTransaction;Lcom/breadwallet/core/BRCoreMasterPubKey;)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_createJniCoreWallet
		(JNIEnv *, jclass, jobjectArray, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    installListener
	 * Signature: (Lcom/breadwallet/core/BRCoreWallet/Listener;)V
	 */
	JNIEXPORT void JNICALL Java_com_elastos_spvcore_CoreWallet_installListener
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getReceiveAddress
	 * Signature: ()Lcom/breadwallet/core/BRCoreAddress;
	 */
	JNIEXPORT jobject JNICALL Java_com_elastos_spvcore_CoreWallet_getReceiveAddress
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getAllAddresses
	 * Signature: ()[Lcom/breadwallet/core/BRCoreAddress;
	 */
	JNIEXPORT jobjectArray JNICALL Java_com_elastos_spvcore_CoreWallet_getAllAddresses
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    containsAddress
	 * Signature: (Lcom/breadwallet/core/BRCoreAddress;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_containsAddress
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    addressIsUsed
	 * Signature: (Lcom/breadwallet/core/BRCoreAddress;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_addressIsUsed
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    jniGetTransactions
	 * Signature: ()[Lcom/breadwallet/core/BRCoreTransaction;
	 */
	JNIEXPORT jobjectArray JNICALL Java_com_elastos_spvcore_CoreWallet_jniGetTransactions
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getTransactionsConfirmedBefore
	 * Signature: (J)[Lcom/breadwallet/core/BRCoreTransaction;
	 */
	JNIEXPORT jobjectArray JNICALL Java_com_elastos_spvcore_CoreWallet_getTransactionsConfirmedBefore
		(JNIEnv *, jobject, jlong);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getBalance
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getBalance
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getTotalSent
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getTotalSent
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getTotalReceived
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getTotalReceived
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getFeePerKb
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getFeePerKb
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    setFeePerKb
	 * Signature: (J)V
	 */
	JNIEXPORT void JNICALL Java_com_elastos_spvcore_CoreWallet_setFeePerKb
		(JNIEnv *, jobject, jlong);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getMaxFeePerKb
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getMaxFeePerKb
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getDefaultFeePerKb
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getDefaultFeePerKb
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    createTransaction
	 * Signature: (JLcom/breadwallet/core/BRCoreAddress;)Lcom/breadwallet/core/BRCoreTransaction;
	 */
	JNIEXPORT jobject JNICALL Java_com_elastos_spvcore_CoreWallet_createTransaction
		(JNIEnv *, jobject, jlong, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    createTransactionForOutputs
	 * Signature: ([Lcom/breadwallet/core/BRCoreTransactionOutput;)Lcom/breadwallet/core/BRCoreTransaction;
	 */
	JNIEXPORT jobject JNICALL Java_com_elastos_spvcore_CoreWallet_createTransactionForOutputs
		(JNIEnv *, jobject, jobjectArray);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    signTransaction
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;I[B)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_signTransaction
		(JNIEnv *, jobject, jobject, jint, jbyteArray);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    containsTransaction
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_containsTransaction
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    jniRegisterTransaction
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_jniRegisterTransaction
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    removeTransaction
	 * Signature: ([B)V
	 */
	JNIEXPORT void JNICALL Java_com_elastos_spvcore_CoreWallet_removeTransaction
		(JNIEnv *, jobject, jbyteArray);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    updateTransactions
	 * Signature: ([[BJJ)V
	 */
	JNIEXPORT void JNICALL Java_com_elastos_spvcore_CoreWallet_updateTransactions
		(JNIEnv *, jobject, jobjectArray, jlong, jlong);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    jniTransactionForHash
	 * Signature: ([B)Lcom/breadwallet/core/BRCoreTransaction;
	 */
	JNIEXPORT jobject JNICALL Java_com_elastos_spvcore_CoreWallet_jniTransactionForHash
		(JNIEnv *, jobject, jbyteArray);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    transactionIsValid
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_transactionIsValid
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    transactionIsPending
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_transactionIsPending
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    transactionIsVerified
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_com_elastos_spvcore_CoreWallet_transactionIsVerified
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getTransactionFee
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getTransactionFee
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getTransactionAmountSent
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getTransactionAmountSent
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getTransactionAmountReceived
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getTransactionAmountReceived
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getBalanceAfterTransaction
	 * Signature: (Lcom/breadwallet/core/BRCoreTransaction;)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getBalanceAfterTransaction
		(JNIEnv *, jobject, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getFeeForTransactionSize
	 * Signature: (J)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getFeeForTransactionSize
		(JNIEnv *, jobject, jlong);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getFeeForTransactionAmount
	 * Signature: (J)J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getFeeForTransactionAmount
		(JNIEnv *, jobject, jlong);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getMinOutputAmount
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getMinOutputAmount
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    getMaxOutputAmount
	 * Signature: ()J
	 */
	JNIEXPORT jlong JNICALL Java_com_elastos_spvcore_CoreWallet_getMaxOutputAmount
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    disposeNative
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_com_elastos_spvcore_CoreWallet_disposeNative
		(JNIEnv *, jobject);

	/*
	 * Class:     com_elastos_spvcore_CoreWallet
	 * Method:    initializeNative
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_com_elastos_spvcore_CoreWallet_initializeNative
		(JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
